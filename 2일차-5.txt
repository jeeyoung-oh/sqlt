conn scott/tiger

아래 실행계획 확인해서  인덱스 동작 CHECK!!!
1.  index range scan  확인
alter session set optimizer_mode=all_rows;
exec clean_index
set autot on exp
create index emp_idx1 on employees(salary);

select * from employees
where salary between 3000 and 4000;

select * from employees
where salary = 2100;

2.  full table scan
exec clean_index

select * from employees
where last_name = 'King';

3.  index unique  scan ( 고유 인덱스를 =  조건으로 검색 )
exec clean_index

select * from employees
where employee_id = 101;

4 .  and-equals ( 2개 이상의 인덱스를 rowid를 기준으로 merge )
exec clean_index

create index emp_idx1 on employees(salary);
create index emp_idx2 on employees(job_id);

-- 실행 계획이 원하는 형태로 나오지 않으면 힌트를 추가한다.
select * 
from employees e
where salary = 17000
and job_id = 'AD_VP';

select /*+ and_equal(e emp_idx1 emp_idx2) */ * 
from employees e
where salary = 17000
and job_id = 'AD_VP';

5.  복합 인덱스를 사용하자.
exec clean_index

create index emp_idx1 on employees(salary, job_id);

select * 
from employees e
where salary = 17000
and job_id = 'AD_VP';

6.  index full scan
 ( 인덱스의 첫 번째 리프 블럭부터 마지막 리프  블럭을 차례로 읽는다.
    DISK I/O 1회당 1개의 블럭을 읽는다. )
exec clean_index

create index emp_idx1 on employees(hire_date, job_id);

select first_name, job_id, hire_date from employees
where job_id='ST_CLERK'
order by hire_date;

7. 필요한 모든 컬럼이 인덱스에 포함되어 있다면 랜덤 액세스를 완전히 제거 할 수 있다.
exec clean_index

create index emp_idx1 on employees(hire_date, job_id, first_name);

select first_name, job_id, hire_date from employees
where job_id='ST_CLERK'
order by hire_date;

8. index fast full scan
( -- 인덱스의 리프 블럭 전체를 한번에 여러 개 읽는다.
  -- DISK I/O 1회당 db_file_multiblock_read_count 개의 리프 블록을 읽는다.
   -- 리프 블럭을 순서대로 읽지 않기 때문에 출력결과도 정렬되지 않는다. )
exec clean_index

create index emp_ix on employees(first_name, salary, job_id);

select /*+ index_ffs(e emp_ix) */ first_name, salary
from employees e
where job_id='ST_CLERK';


9.  index skip scan
exec clean_index

create index emp_idx1 on employees(job_id, salary);


select /*+ index_ss(e emp_idx1) */ * 
from employees e
where salary = 14000;


10 .  min/max scan
exec clean_index

create index emp_idx1 on employees(job_id, salary);

select max(salary)
from employees
where job_id='ST_CLERK';


11.  집계 함수를 사용 할 때 : sort(aggregate)
exec clean_index

select max(salary)
from employees;

-- 중복값을 제거 할 때 : sort(unique), hash(unique)
create index dept_idx1 on departments(department_name);
create index emp_idx1 on employees(manager_id);

-- sort(unique)
select /*+ rule */ employee_id, salary
from employees e
where manager_id in (select manager_id from departments
                     where department_name like 'S%');

-- hash(unique)
select distinct job_id
from employees;

12 .  group by를 사용 할 때 : sort(group by), hash(group by)
exec clean_index

-- sort(group by)
select /*+ rule */ department_id, sum(salary)
from employees
group by department_id;

-- hash(group by)
select department_id, sum(salary)
from employees
group by department_id;

13.  order by 절을 사용 할 때 : sort(order by)
exec clean_index

select employee_id, salary
from employees
order by salary;

-- 인덱스를 사용하면 정렬 작업을 제거 할 수 있다.
create index emp_idx1 on employees(salary);

select /*+ index(e emp_idx1) */ first_name, salary
from employees e
where salary > 0
order by salary;

14.  IN 연산자에 의한 실행 계획을 이해하라
exec clean_index

create index emp_idx1 on employees(job_id);
create index emp_idx2 on employees(department_id);

-- where 절의 in 조건은 concatenation 또는 inlist iterator 로 수행된다.
-- inlist iterator 에서는 in 목록의 값이 정렬되어 출력된다.
select * 
from employees e
where job_id in ('FI_MGR', 'AD_VP', 'IT_PROG');

-- concatenation 으로 수행되도록 하려면, 힌트를 추가한다.
-- in 목록의 가장 우측 값부터 차례로 출력된다.
select /*+ rule */ * 
from employees e
where job_id in ('FI_MGR', 'AD_VP', 'IT_PROG');

-- or 조건의 경우
select *
from employees e
where job_id='AD_VP' or department_id=60;

-- concatenation 으로 수행하려면 힌트를 추가한다.
select /*+ use_concat */ *
from employees e
where job_id='AD_VP' or department_id=60;

15. 집합 연산자의 실행 계획을 분석하라
-- union all 을 제외한 나머지는 모두 정렬 발생
exec clean_index

create index emp_idx1 on employees(department_id);
create index emp_idx2 on employees(salary);

-- union all 
select employee_id, first_name, department_id, salary
from employees
where department_id = 100
union all
select employee_id, first_name, department_id, salary
from employees
where salary >= 24000;

-- union
select employee_id, first_name, department_id, salary
from employees
where department_id = 100
union
select employee_id, first_name, department_id, salary
from employees
where salary >= 24000;

-- intersect
select employee_id, first_name, department_id, salary
from employees
where department_id = 100
intersect
select employee_id, first_name, department_id, salary
from employees
where salary >= 24000;

-- minus
select employee_id, first_name, department_id, salary
from employees
where department_id = 100
minus
select employee_id, first_name, department_id, salary
from employees
where salary >= 24000;

16.  STOPKEY 실행 계획은 우선 순위가 가장 높다.
exec clean_index

-- rownum 이 where 절에 오면 stopkey가 표시
select * 
from employees
where rownum < 10;

create index emp_idx1 on employees(salary);

select *
from employees
where salary > 10000
and rownum < 10;

-- select 절에 rownum 이 오면 count 가 표시
select rownum, first_name, salary from employees;

-- select 절과 where 절에 rownum 이 오면 count stopkey 가 표시
select rownum, first_name, salary from employees
where rownum < 10;

17. 힌트로 실행 계획을 제어하자
exec clean_index

create index emp_idx1 on employees(job_id);

-- 지정된 인덱스 사용 : index
select /*+ index(e emp_idx1) */ *
from employees e
where job_id in ('AD_VP', 'IT_PROG');

select /*+ index(e emp_idx1) */ *
from employees e
where job_id > ' '
order by job_id;

-- 지정된 인덱스를 역순으로 검색 : index_desc
exec clean_index

create index emp_idx1 on employees(hire_date);

select /*+ index_desc(e emp_idx1) */ *
from employees e
where hire_date < '03/06/17';

-- 인덱스를 빠르게 스캔 : index_ffs
exec clean_index 

create index emp_idx1 on employees(employee_id, first_name, salary);

select /*+ index_ffs(e emp_idx1) */ employee_id, first_name, salary
from employees e;

-- 전체 테이블 스캔
select /*+ full(e) */ employee_id, first_name, salary
from employees e
where employee_id = 100;

